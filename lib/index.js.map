{"version":3,"sources":["webpack://tinyhash/webpack/universalModuleDefinition","webpack://tinyhash/./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","defaultHashMap","hash","chunked","String","join","split","map","item","charCodeAt","reduce","total","current","key","input","hashMap","validHashMap","length","one","charAt","two","toUpperCase","transform","match","replace","toLowerCase"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,WAAY,GAAIH,GACG,iBAAZC,QACdA,QAAkB,SAAID,IAEtBD,EAAe,SAAIC,IARrB,CASmB,oBAATK,KAAuBA,KAAOC,MAAM,WAC9C,O,iCCTMC,EAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAa/DC,EAAO,SAACC,GACV,OAAOC,OACHD,EACKE,KAAK,IACLC,MAAM,IACNC,KAAI,SAACC,GAAD,OAAUA,EAAKC,gBACnBC,QAAO,SAACC,EAAOC,EAASC,GAAjB,OAAyBF,EAAQC,EAAUC,IAAK,K,OAkBpE,mBAAgBC,EAAcC,QAAiB,IAA/BD,MAAQ,WAAuB,IAAjBC,MAAU,IAAO,MAb7B,SAACZ,EAASY,QAAiB,IAAjBA,MAAU,IAClC,IAAMC,EAAiC,IAAlBD,EAAQE,OAAehB,EAAiBc,EAC7D,MAAO,CACHG,IAAKf,EAAQI,KAAI,SAACC,GAAD,OAAUA,EAAKW,YAAUd,KAAK,IAC/Ce,IAAKlB,EAAKC,GACLG,MAAM,IACNC,KAAI,SAACC,GAAD,OAAUQ,EAAaR,MAC3BH,KAAK,IACLgB,eAMYC,EAnCX,SAACR,GACX,OAAOV,OAAOU,GAAS,IAAIS,MAAM,iCAAmC,GAkC/BA,CAAMT,IA7BxB,IAAIP,KAAI,SAACC,GAAD,OAAUA,EAAKgB,QAAQ,cAAe,IAAIC,iBA6BjBV,GAA5CG,EADmC,EACnCA,IAAKE,EAD8B,EAC9BA,IACb,SAAOF,IAAOA,IAAMA,EAAME,G","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tinyhash\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tinyhash\"] = factory();\n\telse\n\t\troot[\"tinyhash\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn ","// default hash map\nconst defaultHashMap = ['x', 't', 'z', 'r', 'y', 'w', 'v', 's', 'q', 'u']\n\n// match input string\nconst match = (input) => {\n    return String(input || '').match(/([a-z0-9]).*?([^a-z0-9]|$)/gi) || []\n}\n\n// chunk matched array\nconst chunk = (matched) => {\n    return (matched || []).map((item) => item.replace(/[^a-z0-9]/gi, '').toLowerCase())\n}\n\n// hash chunked array\nconst hash = (chunked) => {\n    return String(\n        chunked\n            .join('')\n            .split('')\n            .map((item) => item.charCodeAt())\n            .reduce((total, current, key) => total + current * key, 0)\n    )\n}\n\n// transform\nconst transform = (chunked, hashMap = []) => {\n    const validHashMap = hashMap.length != 10 ? defaultHashMap : hashMap\n    return {\n        one: chunked.map((item) => item.charAt()).join(''),\n        two: hash(chunked)\n            .split('')\n            .map((item) => validHashMap[item])\n            .join('')\n            .toUpperCase(),\n    }\n}\n\n// export\nexport default (input = null, hashMap = []) => {\n    const { one, two } = transform(chunk(match(input)), hashMap)\n    return one && one ? one + two : false\n}\n"],"sourceRoot":""}